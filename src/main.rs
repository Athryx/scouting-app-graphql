// the schema file generated by diesel requires this
#[macro_use]
extern crate diesel;
#[macro_use]
extern crate diesel_derive_enum;
#[macro_use]
extern crate rocket;
#[macro_use]
extern crate juniper;

mod api;
mod db;
mod prelude;
mod token;
mod context;

use rocket::{State, response::{Redirect, content::Html}, request::Request, Data, data::{Outcome, FromData, ByteUnit}};
use juniper::{RootNode, EmptySubscription};
use juniper_rocket::{GraphQLRequest, GraphQLResponse, graphiql_source, playground_source};
use dotenv::dotenv;

use db::Connection;
pub use token::{UserToken, UserTokenGuard};
pub use context::Context;
use api::{ApiRoot, query::RootQuery, mutation::RootMutation};

pub struct RequestLogger;

#[async_trait]
impl<'r> FromData<'r> for RequestLogger {
	type Error = ();
	
	async fn from_data(_request: &'r Request<'_>, data: Data<'r>) -> Outcome<'r, Self, Self::Error> {
		let gb: ByteUnit = "1GiB".parse().unwrap();
		let out = data.open(gb).into_string().await.unwrap().into_inner();
		println!("{}", out);
		Outcome::Success(RequestLogger)
	}
}

#[get("/graphql?<request>")]
fn get_graphql(request: GraphQLRequest, api_root: &State<ApiRoot>, db_conn: &State<Connection>, token: UserTokenGuard) -> GraphQLResponse {
	let context = Context::new(db_conn.get().unwrap(), token);
	request.execute_sync(api_root, &context)
}

#[post("/graphql", data = "<request>")]
fn post_graphql(request: GraphQLRequest, api_root: &State<ApiRoot>, db_conn: &State<Connection>, token: UserTokenGuard) -> GraphQLResponse {
	std::thread::sleep(std::time::Duration::from_millis(500));
	let context = Context::new(db_conn.get().unwrap(), token);
	request.execute_sync(api_root, &context)
}

// TODO: decide on either graphiql or graphql playground, and remove the other
#[get("/graphiql")]
fn graphiql() -> Html<String> {
	graphiql_source("/graphql", None)
}

#[get("/graphql_playground")]
fn graphql_playground() -> Html<String> {
	playground_source("/graphql", None)
}

#[get("/")]
fn index() -> Redirect {
	Redirect::to("/graphql_playground")
}

#[launch]
fn rocket() -> _ {
	// load enviroment variables into process
	// ignore failure
	dotenv().ok();

	//let figment = rocket::Config::figment()
	//	.merge(("log_level", rocket::config::LogLevel::Normal));
	let figment = rocket::Config::figment();

	rocket::custom(figment)
		.manage(Connection::from_env())
		.manage(RootNode::new(RootQuery, RootMutation, EmptySubscription::<Context>::new()))
		.mount("/", routes![index, get_graphql, post_graphql, graphiql, graphql_playground])
}
